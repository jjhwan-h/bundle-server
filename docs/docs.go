// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/services/clients": {
            "get": {
                "description": "Returns a map of all registered OPA clients grouped by service.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service"
                ],
                "summary": "Get all registered OPA clients",
                "responses": {
                    "200": {
                        "description": "Map of service name to client list",
                        "schema": {
                            "$ref": "#/definitions/handler.clientGroupResponse"
                        }
                    }
                }
            }
        },
        "/services/{service}/bundle": {
            "get": {
                "description": "Serves either a regular or delta bundle file (.tar.gz) for a specific service. Use query parameter ` + "`" + `type=delta` + "`" + ` to get the delta bundle.",
                "produces": [
                    "application/gzip"
                ],
                "tags": [
                    "service"
                ],
                "summary": "Download OPA bundle file",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Service name \u003cbr\u003e Only services listed in clients.service of the config file are allowed.",
                        "name": "service",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bundle type: 'regular' (default) or 'delta'",
                        "name": "type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Bundle file (application/gzip)",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "500": {
                        "description": "Internal server error or file not found",
                        "schema": {
                            "$ref": "#/definitions/errors.HttpError"
                        }
                    }
                }
            }
        },
        "/services/{service}/clients": {
            "get": {
                "description": "Returns a list of registered OPA client addresses for the specified service.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service"
                ],
                "summary": "Get clients by service",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Service name \u003cbr\u003e Only services listed in clients.service of the config file are allowed.",
                        "name": "service",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of registered clients",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Registers one or more OPA SDK client addresses for the specified service. Accepts a JSON array of client URLs or IPs.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service"
                ],
                "summary": "Register OPA webhook client addresses",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Service name \u003cbr\u003e Only services listed in clients.service of the config file are allowed.",
                        "name": "service",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "List of OPA client addresses (IP or domain)",
                        "name": "clients",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Clients registered successfully",
                        "schema": {
                            "$ref": "#/definitions/handler.httpResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON format",
                        "schema": {
                            "$ref": "#/definitions/errors.HttpError"
                        }
                    },
                    "404": {
                        "description": "No clients found in request",
                        "schema": {
                            "$ref": "#/definitions/errors.HttpError"
                        }
                    },
                    "409": {
                        "description": "Conflict - client already exists or internal error",
                        "schema": {
                            "$ref": "#/definitions/errors.HttpError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a specific client (by IP or DNS) or all clients for a service if no client is specified.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service"
                ],
                "summary": "Delete one or all OPA clients for a service",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Service name \u003cbr\u003e Only services listed in clients.service of the config file are allowed.",
                        "name": "service",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Client address (IP or domain). If omitted, all clients will be deleted.",
                        "name": "client",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Client(s) deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/handler.httpResponse"
                        }
                    },
                    "404": {
                        "description": "Client not found",
                        "schema": {
                            "$ref": "#/definitions/handler.httpResponse"
                        }
                    }
                }
            }
        },
        "/services/{service}/data/trigger": {
            "post": {
                "description": "Receives a trigger event to regenerate OPA's data.json, regular bundle, and delta bundle. \u003cbr\u003e If changes are detected, notifies OPA SDK client via webhook (POST /hooks/bundle-update?type=delta).",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service"
                ],
                "summary": "Trigger policy DB update and generate OPA bundles",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Service name \u003cbr\u003e Only services listed in clients.service of the config file are allowed.",
                        "name": "service",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - no changes detected in data.json",
                        "schema": {
                            "$ref": "#/definitions/handler.httpResponse"
                        }
                    },
                    "202": {
                        "description": "Accepted - data.json and bundle were generated successfully",
                        "schema": {
                            "$ref": "#/definitions/handler.httpResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during bundle generation",
                        "schema": {
                            "$ref": "#/definitions/errors.HttpError"
                        }
                    }
                }
            }
        },
        "/services/{service}/policy": {
            "post": {
                "description": "Uploads a policy.rego file and saves it to the service-specific bundle directory.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service"
                ],
                "summary": "Register policy.rego",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Service name \u003cbr\u003e Only services listed in clients.service of the config file are allowed.",
                        "name": "service",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "The policy.rego file to upload",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created - The policy file was saved successfully",
                        "schema": {
                            "$ref": "#/definitions/handler.httpResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during file saving",
                        "schema": {
                            "$ref": "#/definitions/errors.HttpError"
                        }
                    }
                }
            }
        },
        "/services/{service}/policy/trigger": {
            "post": {
                "description": "Receives a trigger event to regenerate regular bundle. \u003cbr\u003e If changes are detected, notifies OPA SDK client via webhook (POST /hooks/bundle-update).",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service"
                ],
                "summary": "Trigger policy.rego update and generate OPA bundles",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Service name \u003cbr\u003e Only services listed in clients.service of the config file are allowed.",
                        "name": "service",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted - bundle were generated successfully",
                        "schema": {
                            "$ref": "#/definitions/handler.httpResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during bundle generation",
                        "schema": {
                            "$ref": "#/definitions/errors.HttpError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "errors.HttpError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "err": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        },
        "handler.clientGroupResponse": {
            "type": "object",
            "properties": {
                "groups": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "handler.httpResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "bundle server",
	Description:      "bundle server",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
